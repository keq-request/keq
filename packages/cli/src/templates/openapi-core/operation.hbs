// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import { Keq } from "keq"
import { request } from "{{keq}}"
import type { RequestParameters, ResponseMap, Operation, QueryParameters, HeaderParameters, BodyParameters } from "./types/{{h__change-case @root.fileNamingStyle (h__get-safe-operation-name pathname method operation)}}{{#if @root.esm}}.js{{/if}}"


export type {{h__change-case "pascalCase" (h__get-safe-operation-name pathname method operation)}}RequestQuery = QueryParameters
export type {{h__change-case "pascalCase" (h__get-safe-operation-name pathname method operation)}}RequestBody = BodyParameters
export type {{h__change-case "pascalCase" (h__get-safe-operation-name pathname method operation)}}RequestHeaders = HeaderParameters


const pathname = "{{{r__replace (h__regexp "{(.*?)}" flags="g") ":$1" pathname}}}"

{{> snippet/comment description=operation.description summary=operation.summary deprecated=operation.deprecated }}
export function {{h__get-safe-operation-name pathname method operation}}<STATUS extends keyof ResponseMap>(arg?: RequestParameters): Keq<ResponseMap[STATUS], Operation<STATUS>> {
  const req = request.{{method}}<ResponseMap[STATUS]>("{{{r__replace (h__regexp "{(.*?)}" flags="g") ":$1" pathname}}}")
    .option('module', {
      name: "{{{moduleName}}}",
      pathname,
    })

  {{#if operation.parameters}}
  {{#each (r__filter (r__propEq "in" "query") operation.parameters)}}
  {{#if @first}}
  const queryWrap = (value: any) => typeof value === 'boolean' ? String(value) : value

  {{/if}}
  if (arg && "{{name}}" in arg) req.query("{{name}}", queryWrap(arg["{{name}}"]))
  {{/each~}}

  {{#each (r__filter (r__propEq "in" "header") operation.parameters)}}
  if (arg && "{{name}}" in arg && arg["{{name}}"]) req.set("{{name}}", arg["{{name}}"])
  {{/each~}}

  {{#each (r__filter (r__propEq "in" "path") operation.parameters)}}
  if (arg && "{{name}}" in arg) req.params("{{name}}", String(arg["{{name}}"]))
  {{/each~}}
  {{/if}}

  {{~#each operation.requestBody.content as |body contentType|}}

    {{~#if body.schema}}
      {{~#if (r__equals contentType "application/json")}}

        {{~#*inline "eachProperties"}}
          {{~#if (h__is-ref this)}}
            {{~#with (h__dereference this)}}
              {{~> eachProperties this}}
            {{~/with}}
          {{~else if this.allOf}}
            {{#each this.allOf}}
              {{~> eachProperties this}}
            {{/each}}
          {{~else if this.oneOf}}
            {{#each this.oneOf}}
              {{~> eachProperties this}}
            {{/each}}
          {{~else if this.anyOf}}
            {{#each this.anyOf}}
              {{~> eachProperties this}}
            {{/each}}
          {{~else}}
            {{#each this.properties}}
  if (arg && "{{@key}}" in arg) req.send({ "{{@key}}": arg["{{@key}}"] })
            {{/each}}
          {{~/if}}
        {{/inline}}

        {{~> eachProperties body.schema}}

      {{~else if (r__equals contentType "multipart/form-data")}}

        {{~#*inline "eachProperties"}}
          {{~#if (h__is-ref this)}}
            {{~#with (h__dereference this)}}
              {{~> eachProperties this}}
            {{~/with}}
          {{~else if this.allOf}}
            {{#each this.allOf}}
              {{~> eachProperties this}}
            {{/each}}
          {{~else if this.oneOf}}
            {{#each this.oneOf}}
              {{~> eachProperties this}}
            {{/each}}
          {{~else if this.anyOf}}
            {{#each this.anyOf}}
              {{~> eachProperties this}}
            {{/each}}
          {{~else}}
            {{#each this.properties as |prop key|}}
              {{#if (r__equals prop.format "binary")}}
  if (arg && "{{key}}" in arg && arg["{{key}}"]) req.attach("{{key}}", arg["{{key}}"])
              {{else}}
  if (arg && "{{key}}" in arg && arg["{{key}}"] !== undefined) req.field({ "{{key}}": arg["{{key}}"] })
              {{/if}}
            {{/each}}
          {{~/if}}
        {{/inline}}

        {{~> eachProperties this.schema}}
      {{~/if}}
    {{~/if}}

  {{~/each}}

  return req as unknown as Keq<ResponseMap[STATUS], Operation<STATUS>>
}

{{h__get-safe-operation-name pathname method operation}}.pathname = pathname
