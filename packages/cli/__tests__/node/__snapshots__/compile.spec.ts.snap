// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compile swagger 1`] = `
[
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import type { ArrayOfStringsSchema } from "./array_of_strings_schema"
import type { ObjectWithSpecifiedTypeAdditionalPropertiesSchema } from "./object_with_specified_type_additional_properties_schema"
import type { ObjectWithAdditionalPropertiesSchema } from "./object_with_additional_properties_schema"


/**
 * @interface RootSchema
 * @export
 */
export interface RootSchema {
  "unknownProp"?: any
  "constProp": "constValue"
  "enumProp"?: "str" | 1 | {
    "key": true
  }
  /**
   * @deprecated
   */
  "deprecatedStringProp"?: string
  /**
   * Deprecated Number Prop
   *
   * @deprecated
   */
  "deprecatedNumberProp"?: string
  "emptyObjectProp"?: {
  }
  /**
   * This is String Prop
   */
  "stringProp"?: string
  /**
   * Multiple line description
   * This is Number Prop
   */
  "numberProp"?: number
  "booleanProp"?: boolean
  /**
   * @type int64
   */
  "integerProp"?: number
  "tupleProp"?: [string, number, boolean]
  "stringPropWithMaxLength"?: string
  "arrayOfStringsProp"?: (string)[]
  "arrayOfNullableRefProp"?: (ObjectWithSpecifiedTypeAdditionalPropertiesSchema | null)[]
  "refProp"?: ArrayOfStringsSchema
  "objectProp"?: {
    "stringPropRequired": string
    "stringPropNullable"?: string | null
    "refPropNullable"?: ObjectWithAdditionalPropertiesSchema | null
  }
}
",
    "name": "root_schema",
    "path": "outdir/test/components/schemas/root_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

/**
 * @interface ArrayOfStringsSchema
 * @export
 */
export type ArrayOfStringsSchema = (string)[]
",
    "name": "array_of_strings_schema",
    "path": "outdir/test/components/schemas/array_of_strings_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

/**
 * @interface ObjectWithAdditionalPropertiesSchema
 * @export
 */
export interface ObjectWithAdditionalPropertiesSchema {
  [key: string]: undefined | any
}
",
    "name": "object_with_additional_properties_schema",
    "path": "outdir/test/components/schemas/object_with_additional_properties_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

/**
 * @interface ObjectWithSpecifiedTypeAdditionalPropertiesSchema
 * @export
 */
export interface ObjectWithSpecifiedTypeAdditionalPropertiesSchema {
  /**
   * This is String Addition Prop
   */
  [key: string]: undefined | string
}
",
    "name": "object_with_specified_type_additional_properties_schema",
    "path": "outdir/test/components/schemas/object_with_specified_type_additional_properties_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

/**
 * @interface RefSchema
 * @export
 */
export type RefSchema = ArrayOfStringsSchema
",
    "name": "ref_schema",
    "path": "outdir/test/components/schemas/ref_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

/**
 * @interface NullableObjectSchema
 * @export
 */
export type NullableObjectSchema = {
  "stringProp"?: string
} | null
",
    "name": "nullable_object_schema",
    "path": "outdir/test/components/schemas/nullable_object_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

/**
 * @interface OneOfSchema
 * @export
 */
export type OneOfSchema = string | number | boolean
",
    "name": "one_of_schema",
    "path": "outdir/test/components/schemas/one_of_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

/**
 * @interface AnyOfSchema
 * @export
 */
export type AnyOfSchema = string | number | boolean
",
    "name": "any_of_schema",
    "path": "outdir/test/components/schemas/any_of_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

/**
 * @interface AllOfSchema
 * @export
 */
export type AllOfSchema = {
  "stringProp"?: string
} & {
  "numberProp"?: number
}
",
    "name": "all_of_schema",
    "path": "outdir/test/components/schemas/all_of_schema.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import type { KeqOperation } from 'keq'


export interface ResponseMap {
  "200": unknown
}


export type QueryParameters = {
  "requiredQueryProp": number
  "optionalQueryProp"?: number
}

export type RouteParameters = {
  "id": string
}

export type HeaderParameters = {
  "headerProp": string
}

export type BodyParameters ={}
export type RequestParameters = QueryParameters & RouteParameters & HeaderParameters & BodyParameters


export interface Operation<STATUS extends keyof ResponseMap> extends KeqOperation {
  requestParams: RouteParameters
  requestQuery: QueryParameters
  requestHeaders: HeaderParameters
  requestBody: BodyParameters
  responseBody: ResponseMap[STATUS]
}
",
    "name": "get",
    "path": "outdir/test/types/get.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import { Keq } from "keq"
import { request } from "keq"
import type { RequestParameters, ResponseMap, Operation, QueryParameters, HeaderParameters, BodyParameters } from "./types/get"


export type GetRequestQuery = QueryParameters
export type GetRequestBody = BodyParameters
export type GetRequestHeaders = HeaderParameters


const pathname = "/:id"

export function get<STATUS extends keyof ResponseMap>(arg?: RequestParameters): Keq<ResponseMap[STATUS], Operation<STATUS>> {
  const req = request.get<ResponseMap[STATUS]>("/:id")
    .option('module', {
      name: "test",
      pathname,
    })

  const queryWrap = (value: any) => typeof value === 'boolean' ? String(value) : value

  if (arg && "requiredQueryProp" in arg) req.query("requiredQueryProp", queryWrap(arg["requiredQueryProp"]))
  if (arg && "optionalQueryProp" in arg) req.query("optionalQueryProp", queryWrap(arg["optionalQueryProp"]))
  if (arg && "headerProp" in arg && arg["headerProp"]) req.set("headerProp", arg["headerProp"])
  if (arg && "id" in arg) req.params("id", String(arg["id"]))

  return req as unknown as Keq<ResponseMap[STATUS], Operation<STATUS>>
}

get.pathname = pathname
",
    "name": "get",
    "path": "outdir/test/get.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import type { KeqOperation } from 'keq'
import type { RootSchema } from "../components/schemas/root_schema"


export interface ResponseMap {
  "200": RootSchema
}


export type QueryParameters = {
}

export type RouteParameters = {
  "id": string
}

export type HeaderParameters = {
}

export type BodyParameters =(RootSchema)

export type RequestParameters = QueryParameters & RouteParameters & HeaderParameters & BodyParameters


export interface Operation<STATUS extends keyof ResponseMap> extends KeqOperation {
  requestParams: RouteParameters
  requestQuery: QueryParameters
  requestHeaders: HeaderParameters
  requestBody: BodyParameters
  responseBody: ResponseMap[STATUS]
}
",
    "name": "post_id",
    "path": "outdir/test/types/post_id.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import { Keq } from "keq"
import { request } from "keq"
import type { RequestParameters, ResponseMap, Operation, QueryParameters, HeaderParameters, BodyParameters } from "./types/post_id"


export type PostIdRequestQuery = QueryParameters
export type PostIdRequestBody = BodyParameters
export type PostIdRequestHeaders = HeaderParameters


const pathname = "/:id"

export function post__$id<STATUS extends keyof ResponseMap>(arg?: RequestParameters): Keq<ResponseMap[STATUS], Operation<STATUS>> {
  const req = request.post<ResponseMap[STATUS]>("/:id")
    .option('module', {
      name: "test",
      pathname,
    })

  if (arg && "id" in arg) req.params("id", String(arg["id"]))
  if (arg && "unknownProp" in arg) req.send({ "unknownProp": arg["unknownProp"] })
  if (arg && "constProp" in arg) req.send({ "constProp": arg["constProp"] })
  if (arg && "enumProp" in arg) req.send({ "enumProp": arg["enumProp"] })
  if (arg && "deprecatedStringProp" in arg) req.send({ "deprecatedStringProp": arg["deprecatedStringProp"] })
  if (arg && "deprecatedNumberProp" in arg) req.send({ "deprecatedNumberProp": arg["deprecatedNumberProp"] })
  if (arg && "emptyObjectProp" in arg) req.send({ "emptyObjectProp": arg["emptyObjectProp"] })
  if (arg && "stringProp" in arg) req.send({ "stringProp": arg["stringProp"] })
  if (arg && "numberProp" in arg) req.send({ "numberProp": arg["numberProp"] })
  if (arg && "booleanProp" in arg) req.send({ "booleanProp": arg["booleanProp"] })
  if (arg && "integerProp" in arg) req.send({ "integerProp": arg["integerProp"] })
  if (arg && "tupleProp" in arg) req.send({ "tupleProp": arg["tupleProp"] })
  if (arg && "stringPropWithMaxLength" in arg) req.send({ "stringPropWithMaxLength": arg["stringPropWithMaxLength"] })
  if (arg && "arrayOfStringsProp" in arg) req.send({ "arrayOfStringsProp": arg["arrayOfStringsProp"] })
  if (arg && "arrayOfNullableRefProp" in arg) req.send({ "arrayOfNullableRefProp": arg["arrayOfNullableRefProp"] })
  if (arg && "refProp" in arg) req.send({ "refProp": arg["refProp"] })
  if (arg && "objectProp" in arg) req.send({ "objectProp": arg["objectProp"] })

  return req as unknown as Keq<ResponseMap[STATUS], Operation<STATUS>>
}

post__$id.pathname = pathname
",
    "name": "post_id",
    "path": "outdir/test/post_id.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import type { KeqOperation } from 'keq'


export interface ResponseMap {
}


export type QueryParameters = {
}

export type RouteParameters = {
}

export type HeaderParameters = {
}

export type BodyParameters ={}
export type RequestParameters = QueryParameters & RouteParameters & HeaderParameters & BodyParameters


export interface Operation<STATUS extends keyof ResponseMap> extends KeqOperation {
  requestParams: RouteParameters
  requestQuery: QueryParameters
  requestHeaders: HeaderParameters
  requestBody: BodyParameters
  responseBody: ResponseMap[STATUS]
}
",
    "name": "get_simple",
    "path": "outdir/test/types/get_simple.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import { Keq } from "keq"
import { request } from "keq"
import type { RequestParameters, ResponseMap, Operation, QueryParameters, HeaderParameters, BodyParameters } from "./types/get_simple"


export type GetSimpleRequestQuery = QueryParameters
export type GetSimpleRequestBody = BodyParameters
export type GetSimpleRequestHeaders = HeaderParameters


const pathname = "/simple"

export function get__simple<STATUS extends keyof ResponseMap>(arg?: RequestParameters): Keq<ResponseMap[STATUS], Operation<STATUS>> {
  const req = request.get<ResponseMap[STATUS]>("/simple")
    .option('module', {
      name: "test",
      pathname,
    })


  return req as unknown as Keq<ResponseMap[STATUS], Operation<STATUS>>
}

get__simple.pathname = pathname
",
    "name": "get_simple",
    "path": "outdir/test/get_simple.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import type { KeqOperation } from 'keq'


export interface ResponseMap {
  "200": {
}
}


export type QueryParameters = {
}

export type RouteParameters = {
}

export type HeaderParameters = {
}

export type BodyParameters ={}
export type RequestParameters = QueryParameters & RouteParameters & HeaderParameters & BodyParameters


export interface Operation<STATUS extends keyof ResponseMap> extends KeqOperation {
  requestParams: RouteParameters
  requestQuery: QueryParameters
  requestHeaders: HeaderParameters
  requestBody: BodyParameters
  responseBody: ResponseMap[STATUS]
}
",
    "name": "post_simple",
    "path": "outdir/test/types/post_simple.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import { Keq } from "keq"
import { request } from "keq"
import type { RequestParameters, ResponseMap, Operation, QueryParameters, HeaderParameters, BodyParameters } from "./types/post_simple"


export type PostSimpleRequestQuery = QueryParameters
export type PostSimpleRequestBody = BodyParameters
export type PostSimpleRequestHeaders = HeaderParameters


const pathname = "/simple"

export function post__simple<STATUS extends keyof ResponseMap>(arg?: RequestParameters): Keq<ResponseMap[STATUS], Operation<STATUS>> {
  const req = request.post<ResponseMap[STATUS]>("/simple")
    .option('module', {
      name: "test",
      pathname,
    })


  return req as unknown as Keq<ResponseMap[STATUS], Operation<STATUS>>
}

post__simple.pathname = pathname
",
    "name": "post_simple",
    "path": "outdir/test/post_simple.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import type { KeqOperation } from 'keq'


export interface ResponseMap {
}


export type QueryParameters = {
}

export type RouteParameters = {
}

export type HeaderParameters = {
}

export type BodyParameters ={}
export type RequestParameters = QueryParameters & RouteParameters & HeaderParameters & BodyParameters


export interface Operation<STATUS extends keyof ResponseMap> extends KeqOperation {
  requestParams: RouteParameters
  requestQuery: QueryParameters
  requestHeaders: HeaderParameters
  requestBody: BodyParameters
  responseBody: ResponseMap[STATUS]
}
",
    "name": "delete_keyword",
    "path": "outdir/test/types/delete_keyword.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import { Keq } from "keq"
import { request } from "keq"
import type { RequestParameters, ResponseMap, Operation, QueryParameters, HeaderParameters, BodyParameters } from "./types/delete_keyword"


export type DeleteKeywordRequestQuery = QueryParameters
export type DeleteKeywordRequestBody = BodyParameters
export type DeleteKeywordRequestHeaders = HeaderParameters


const pathname = "/keyword"

export function deleteKeyword<STATUS extends keyof ResponseMap>(arg?: RequestParameters): Keq<ResponseMap[STATUS], Operation<STATUS>> {
  const req = request.delete<ResponseMap[STATUS]>("/keyword")
    .option('module', {
      name: "test",
      pathname,
    })


  return req as unknown as Keq<ResponseMap[STATUS], Operation<STATUS>>
}

deleteKeyword.pathname = pathname
",
    "name": "delete_keyword",
    "path": "outdir/test/delete_keyword.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import type { KeqOperation } from 'keq'


export interface ResponseMap {
}


export type QueryParameters = {
}

export type RouteParameters = {
}

export type HeaderParameters = {
}

export type BodyParameters =({
  /**
   * file
   *
   * @type binary
   */
  "file": Blob | Buffer
})

export type RequestParameters = QueryParameters & RouteParameters & HeaderParameters & BodyParameters


export interface Operation<STATUS extends keyof ResponseMap> extends KeqOperation {
  requestParams: RouteParameters
  requestQuery: QueryParameters
  requestHeaders: HeaderParameters
  requestBody: BodyParameters
  responseBody: ResponseMap[STATUS]
}
",
    "name": "upload",
    "path": "outdir/test/types/upload.ts",
  },
  {
    "content": "// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.
// Code generated by keq-cli. DO NOT EDIT.

import { Keq } from "keq"
import { request } from "keq"
import type { RequestParameters, ResponseMap, Operation, QueryParameters, HeaderParameters, BodyParameters } from "./types/upload"


export type UploadRequestQuery = QueryParameters
export type UploadRequestBody = BodyParameters
export type UploadRequestHeaders = HeaderParameters


const pathname = "/upload"

/**
 * Upload File 
 * Description
 *
 * @summary Upload File
 */
export function upload<STATUS extends keyof ResponseMap>(arg?: RequestParameters): Keq<ResponseMap[STATUS], Operation<STATUS>> {
  const req = request.post<ResponseMap[STATUS]>("/upload")
    .option('module', {
      name: "test",
      pathname,
    })

  if (arg && "file" in arg && arg["file"]) req.attach("file", arg["file"])

  return req as unknown as Keq<ResponseMap[STATUS], Operation<STATUS>>
}

upload.pathname = pathname
",
    "name": "upload",
    "path": "outdir/test/upload.ts",
  },
]
`;
